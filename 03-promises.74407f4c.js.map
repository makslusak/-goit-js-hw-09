{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAGMC,GADUC,SAASC,cAAc,SACtBD,SAASC,cAAc,mBAClCC,EAAUF,SAASC,cAAc,iBACjCE,EAAYH,SAASC,cAAc,mBAC1BD,SAASC,cAAc,mBAE/BG,iBAAiB,SAGxB,SAAsBC,GACpBA,EAAIC,iBACJC,YAAW,W,kBAGPC,EAAiBC,EAAI,EACpBF,YAAW,WAiBlB,IAAuBG,EAAUC,EACzBC,GADeF,EAhBAF,EAgBUG,EAhBMT,EAAQW,cAiBvCD,EAAgBE,KAAKC,SAAW,GAC7B,IAAIC,SAAQ,SAACC,EAASC,GAEvBN,EACFK,EAAQ,CAAEP,WAAUC,UAEpBO,EAAO,CAAER,WAAUC,S,KArBhBQ,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MACjBd,EAAAwB,OAAOC,QAAQ,qBAAoCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAE1Da,OAAM,SAAAJ,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MAClBd,EAAAwB,OAAOI,QAAQ,oBAAmCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,MAG3DT,EAAQW,c,EAbba,QAAQC,IAAI,qBACZ,IAAK,IAAIC,EAAI,EAAGA,EAAIzB,EAAUU,cAAee,GAAG,EAACC,EAAAD,GAcjDF,QAAQC,IAAI,oB,GAEV5B,EAASc,c,IAtBf,IAAIL,EAAiB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\nconst btnRef = document.querySelector('[type=\"submit\"]');\n\nbtnRef.addEventListener('click', onFormSubmit);\nlet promisPosition = 0;\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n  setTimeout(() => {\n    console.log(11111111111111111111111111)\n    for (let i = 0; i < amountRef.valueAsNumber; i+=1) {\n      promisPosition = i + 1;\n       setTimeout(() => {\n         createPromise(promisPosition, stepRef.valueAsNumber)\n\n          .then(({ position, delay }) => {\n            Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n          })\n          .catch(({ position, delay }) => {\n            Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n          });\n      }\n        ,stepRef.valueAsNumber)\n    }\n    console.log(22222222222222222222222222)\n  }\n    , delayRef.valueAsNumber\n  );\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n    return new Promise((resolve, reject) => {\n       \n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n  });\n}\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$delayRef","document","querySelector","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$amountRef","addEventListener","evt","preventDefault","setTimeout","$ce04d3a99e08e73b$var$promisPosition","i","position","delay","shouldResolve","valueAsNumber","Math","random","Promise","resolve","reject","then","param","Notify","success","concat","catch","failure","console","log","i1","_loop"],"version":3,"file":"03-promises.74407f4c.js.map"}